# Задание 1

### Перед запуском кода, необходимо проверить командой установлен Flask или нет.
### Команду "pip install flask" запускаем в терминале PyCharm.

###Сначала создадим базу данных SQLite и заполним её данными на основе примера из задания
import sqlite3

# Создаем соединение с базой данных
conn = sqlite3.connect('gifts.db')
cursor = conn.cursor()

# Создаем таблицу подарков
cursor.execute('''
CREATE TABLE IF NOT EXISTS gifts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    full_name TEXT NOT NULL,
    gift_name TEXT NOT NULL,
    cost REAL NOT NULL,
    status TEXT NOT NULL
)
''')

# пояснения к таблице подарков (см.выше): 
# параметр "id" - это уникальный идентификатор, который автоматически увеличивается при добавлении новой записи.
# параметр "full_name" - это имя получателя подарка, того кому дарим.
# параметр "gift_name" - это название подарка, что дарим.
# параметр "cost" - это стоимость подарка (цена).
# параметр "status" - это текущий статус покупки подарка.


# Заполняем созданную таблицу подарков данными
data = [
    ('Иван Иванов', 'Санки', 2000, 'куплен'),
    ('Ирина Сергеева', 'Цветы', 3000, 'не куплен'),
    ('Петр Петров', 'Книга', 1500, 'куплен'),
    ('Анна Смирнова', 'Шоколад', 500, 'не куплен'),
    ('Сергей Кузнецов', 'Кружка', 700, 'куплен'),
    ('Елена Васильева', 'Шарф', 1200, 'не куплен'),
    ('Дмитрий Соколов', 'Конструктор', 2500, 'куплен'),
    ('Ольга Павлова', 'Набор для рисования', 1800, 'не куплен'),
    ('Алексей Федоров', 'Брелок', 400, 'куплен'),
    ('Марина Семенова', 'Календарь', 800, 'не куплен')
]

cursor.executemany('INSERT INTO gifts (full_name, gift_name, cost, status) VALUES (?, ?, ?, ?)',
                   data)  # данный метод позволяет выполнить массовую вставку записей в созданную таблицу подарков.

# Сохраняем изменения в нашей базе данных "gifts.db"
conn.commit()

# Проверим наличие данных в таблице. Выводим все строки из таблицы.
cursor.execute('SELECT * FROM gifts')
rows = cursor.fetchall()
for row in rows:
    print(row)

# Закрываем соединение
conn.close()

### Теперь создадим простое веб-приложение на Flask, которое будет выводить данные из базы данных в формате HTML-таблицы
from flask import Flask, render_template
import sqlite3

app = Flask(__name__)


@app.route('/')  # корневой маршрут
def index():  # подключение к нашей базе данных
    try:
        with sqlite3.connect('gifts.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT id, full_name, gift_name, cost, status FROM gifts')
            rows = cursor.fetchall()
    except sqlite3.Error as e:
        print(f'Ошибка при доступе к базе данных: {e}')
    else:
        return render_template('index.html',
                               rows=rows)  # получаем все записи из таблицы "gifts" и передаем их в шаблон "index.html".


if __name__ == '__main__':
    app.run(host='0.0.0.0',
            debug=True)  # при возникновении ошибки доступа к базе данных, она выводится в консоль. А сервер запускается в режиме отладки и доступен по указанному адресу.

### Создадим шаблон templates/index.html, который будет использоваться для отображения данных. Делаем это отдельным файлом "index.html" и сохраняем его в папку "templates".
### Папка "templates" должна быть расположена там же где и файл Flask.py
### Далее, запускаем код, переходим по адресу http://127.0.0.1:5000 (вероятнее всего он будет таким, но лучше проверить после запуска кода) и все должно работать.